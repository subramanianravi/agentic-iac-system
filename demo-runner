#!/usr/bin/env python3
"""
Demo application runner for Agentic IaC System
"""

import sys
import os
from pathlib import Path

def main():
    print("🎯 Demo Runner Starting...")
    print(f"Arguments received: {sys.argv}")
    
    # Extract app name (first argument after script name)
    if len(sys.argv) < 2:
        print("❌ No app name provided")
        sys.exit(1)
    
    app_name = sys.argv[1]
    
    # Look for --target-dir argument
    target_dir = None
    if "--target-dir" in sys.argv:
        target_idx = sys.argv.index("--target-dir")
        if target_idx + 1 < len(sys.argv):
            target_dir = sys.argv[target_idx + 1]
    
    print(f"🎯 Setting up demo application: {app_name}")
    
    # Determine the demo directory
    if target_dir:
        demo_dir = Path(target_dir)
        print(f"📁 Using target directory: {target_dir}")
    else:
        demo_dir = Path("demo") / app_name
        print(f"📁 Using default directory: {demo_dir}")
    
    # Create directory if it doesn't exist
    demo_dir.mkdir(parents=True, exist_ok=True)
    
    # Setup based on app type
    if app_name == "simple-nodejs-api":
        setup_nodejs_app(demo_dir)
    elif "python" in app_name or "flask" in app_name:
        setup_python_app(demo_dir)
    else:
        print(f"✅ Generic setup for: {app_name}")
    
    print("🎉 Demo setup completed successfully!")

def setup_nodejs_app(demo_dir):
    """Setup Node.js application"""
    package_json_path = demo_dir / "package.json"
    app_js_path = demo_dir / "app.js"
    
    if not package_json_path.exists():
        print("📝 Creating package.json...")
        package_json_content = '''{
  "name": "simple-nodejs-api",
  "version": "1.0.0",
  "description": "Simple Node.js API demo",
  "main": "app.js",
  "scripts": {
    "start": "node app.js",
    "test": "echo \\"Test passed\\" && exit 0"
  },
  "dependencies": {
    "express": "^4.18.0"
  }
}'''
        package_json_path.write_text(package_json_content)
    
    if not app_js_path.exists():
        print("📝 Creating app.js...")
        app_js_content = '''const express = require('express');
const app = express();
const port = process.env.PORT || 3000;

app.get('/', (req, res) => {
  res.json({ message: 'Hello from Agentic IaC Demo!', timestamp: new Date().toISOString() });
});

app.get('/health', (req, res) => {
  res.json({ status: 'healthy', timestamp: new Date().toISOString() });
});

if (require.main === module) {
  app.listen(port, () => {
    console.log(`Demo API listening at http://localhost:${port}`);
  });
}

module.exports = app;
'''
        app_js_path.write_text(app_js_content)
    
    print("✅ Node.js demo files created")

def setup_python_app(demo_dir):
    """Setup Python application"""
    app_py_path = demo_dir / "app.py"
    requirements_path = demo_dir / "requirements.txt"
    
    if not app_py_path.exists():
        print("📝 Creating app.py...")
        app_py_content = '''from flask import Flask, jsonify
from datetime import datetime

app = Flask(__name__)

@app.route('/')
def hello():
    return jsonify({
        "message": "Hello from Agentic IaC Python Demo!",
        "timestamp": datetime.now().isoformat()
    })

@app.route('/health')
def health():
    return jsonify({
        "status": "healthy",
        "timestamp": datetime.now().isoformat()
    })

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
'''
        app_py_path.write_text(app_py_content)
    
    if not requirements_path.exists():
        print("📝 Creating requirements.txt...")
        requirements_path.write_text("flask>=2.0.0\n")
    
    print("✅ Python demo files created")

if __name__ == "__main__":
    main()
