name: 🤖 Agentic AI Infrastructure Deployment

on:
  # Trigger on pushes to main branches
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'demo/**'
      - 'config/**'
      - '.github/workflows/**'
  
  # Trigger on pull requests
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  
  # Manual workflow dispatch with options
  workflow_dispatch:
    inputs:
      demo_app:
        description: 'Demo application to deploy'
        required: true
        default: 'simple-nodejs-api'
        type: choice
        options:
          - simple-nodejs-api
          - microservices-demo
          - spring-petclinic-microservices
          - realworld-example
          - sockshop-microservices
      
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      
      dry_run:
        description: 'Perform dry run (no actual resources created)'
        required: false
        default: true
        type: boolean
      
      enable_dr_testing:
        description: 'Enable disaster recovery testing'
        required: false
        default: false
        type: boolean

# Global environment variables
env:
  AWS_REGION: us-west-2
  GCP_REGION: us-central1
  KUBERNETES_VERSION: "1.28"
  PYTHON_VERSION: "3.11"
  DEMO_TIMEOUT_MINUTES: 30
  
# Workflow-level permissions
permissions:
  contents: read
  actions: read
  security-events: write
  pull-requests: write

jobs:
  # =========================================================================
  # 🤖 PHASE 1: AI ANALYSIS
  # =========================================================================
  agentic-analysis:
    name: 🤖 AI Analysis Phase
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    outputs:
      deployment-plan: ${{ steps.analysis.outputs.plan }}
      app-complexity: ${{ steps.analysis.outputs.complexity }}
      detected-languages: ${{ steps.analysis.outputs.languages }}
      infrastructure-requirements: ${{ steps.analysis.outputs.infrastructure }}
      
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: 🐍 Setup Python Environment
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'requirements.txt'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit  # Security scanning tools
    
    - name: 🔍 Security Scan Dependencies
      run: |
        echo "🔒 Scanning dependencies for vulnerabilities..."
        safety check --json || true
        bandit -r src/ -f json -o security-report.json || true
    
    - name: ⚙️ Configure Environment
      run: |
        # Setup configuration
        mkdir -p ~/.agentic-iac
        cp config/agentic-config.yaml ~/.agentic-iac/ 2>/dev/null || echo "Config not found, using defaults"
        
        # Setup Python path
        echo "PYTHONPATH=${GITHUB_WORKSPACE}/src:${PYTHONPATH}" >> $GITHUB_ENV
        
        # Create working directories
        mkdir -p {logs,temp,results,artifacts}
        
        # Set demo mode for workflow
        echo "DEMO_MODE=true" >> $GITHUB_ENV
    
    - name: 📋 Determine Source Repository
      id: source
      run: |
        if [ "${{ github.event.inputs.demo_app }}" != "" ]; then
          DEMO_APP="${{ github.event.inputs.demo_app }}"
          REPO_PATH="demo-apps/${DEMO_APP}"
          echo "Using demo application: ${DEMO_APP}"
          echo "demo_app=${DEMO_APP}" >> $GITHUB_OUTPUT
          echo "repo_path=${REPO_PATH}" >> $GITHUB_OUTPUT
          echo "is_demo=true" >> $GITHUB_OUTPUT
        else
          echo "Using current repository"
          echo "demo_app=current-repo" >> $GITHUB_OUTPUT
          echo "repo_path=." >> $GITHUB_OUTPUT
          echo "is_demo=false" >> $GITHUB_OUTPUT
        fi
    
    - name: 🔄 Setup Demo Application
      if: steps.source.outputs.is_demo == 'true'
      run: |
        echo "🎯 Setting up demo application: ${{ steps.source.outputs.demo_app }}"
        python demo-runner setup ${{ steps.source.outputs.demo_app }} --target-dir ${{ steps.source.outputs.repo_path }}
    
    - name: 🤖 Execute AI Analysis
      id: analysis
      run: |
        echo "🧠 Starting AI-powered application analysis..."
        
        # Run the AI analysis
        python agentic-iac analyze \
          --repo-path "${{ steps.source.outputs.repo_path }}" \
          --output-file deployment-analysis.json \
          --target-aws-region ${{ env.AWS_REGION }} \
          --target-gcp-region ${{ env.GCP_REGION }} \
          --verbose
        
        # Extract key information for subsequent jobs
        if [ -f deployment-analysis.json ]; then
          COMPLEXITY=$(jq -r '.complexity // "medium"' deployment-analysis.json)
          LANGUAGES=$(jq -r '.languages // [] | join(",")' deployment-analysis.json)
          SERVICES=$(jq -r '.services // [] | length' deployment-analysis.json)
          
          echo "complexity=${COMPLEXITY}" >> $GITHUB_OUTPUT
          echo "languages=${LANGUAGES}" >> $GITHUB_OUTPUT
          echo "services_count=${SERVICES}" >> $GITHUB_OUTPUT
          echo "plan=$(jq -c . deployment-analysis.json)" >> $GITHUB_OUTPUT
          
          # Set infrastructure requirements
          INFRA_REQS=$(jq -r '.infrastructure_requirements // {}' deployment-analysis.json)
          echo "infrastructure=${INFRA_REQS}" >> $GITHUB_OUTPUT
          
          echo "✅ Analysis completed successfully"
          echo "📊 Detected complexity: ${COMPLEXITY}"
          echo "🔤 Languages found: ${LANGUAGES}"
          echo "🏢 Services count: ${SERVICES}"
        else
          echo "❌ Analysis failed - no output file generated"
          exit 1
        fi
    
    - name: 📊 Generate Analysis Summary
      run: |
        echo "## 🤖 AI Analysis Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Application** | ${{ steps.source.outputs.demo_app }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Complexity** | ${{ steps.analysis.outputs.complexity }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Languages** | ${{ steps.analysis.outputs.languages }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Services** | ${{ steps.analysis.outputs.services_count }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f deployment-analysis.json ]; then
          echo "### 🏗️ Infrastructure Requirements" >> $GITHUB_STEP_SUMMARY
          echo "**AWS Resources:**" >> $GITHUB_STEP_SUMMARY
          jq -r '.infrastructure_plan.aws_resources | keys[]' deployment-analysis.json 2>/dev/null | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY || echo "- Basic compute resources" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**GCP Resources (DR):**" >> $GITHUB_STEP_SUMMARY
          jq -r '.infrastructure_plan.gcp_resources | keys[]' deployment-analysis.json 2>/dev/null | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY || echo "- Basic compute resources" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: 💾 Upload Analysis Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ai-analysis-results
        path: |
          deployment-analysis.json
          security-report.json
          logs/
        retention-days: 30
        if-no-files-found: warn

  # =========================================================================
  # 🏗️ PHASE 2: INFRASTRUCTURE PROVISIONING
  # =========================================================================
  infrastructure-provisioning:
    name: 🏗️ AI Infrastructure Provisioning
    needs: agentic-analysis
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    # Only run on main branch or manual dispatch
    if: |
      (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch') &&
      needs.agentic-analysis.result == 'success'
    
    environment: 
      name: ${{ github.event.inputs.environment || 'staging' }}
      url: ${{ steps.infrastructure.outputs.dashboard_url }}
    
    outputs:
      aws-resources: ${{ steps.infrastructure.outputs.aws_resources }}
      gcp-resources: ${{ steps.infrastructure.outputs.gcp_resources }}
      cluster-endpoint: ${{ steps.infrastructure.outputs.cluster_endpoint }}
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python Environment
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: ☁️ Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        role-duration-seconds: 3600
        role-session-name: AgenticIaCGitHubActions
    
    - name: 🌐 Configure GCP Credentials
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: 🛠️ Setup Cloud Tools
      run: |
        # Install additional tools
        curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.28.3/2023-11-14/bin/linux/amd64/kubectl
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # Install eksctl
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin
        
        # Verify installations
        kubectl version --client
        eksctl version
        gcloud version
    
    - name: 📥 Download Analysis Artifacts
      uses: actions/download-artifact@v4
      with:
        name: ai-analysis-results
    
    - name: 🏗️ Execute AI Infrastructure Provisioning
      id: infrastructure
      run: |
        # Setup environment
        export PYTHONPATH="${GITHUB_WORKSPACE}/src:$PYTHONPATH"
        
        # Determine if this is a dry run
        DRY_RUN="${{ github.event.inputs.dry_run || 'true' }}"
        ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
        
        echo "🚀 Starting infrastructure provisioning..."
        echo "Environment: ${ENVIRONMENT}"
        echo "Dry run: ${DRY_RUN}"
        echo "Complexity: ${{ needs.agentic-analysis.outputs.app-complexity }}"
        
        # Run AI-powered infrastructure provisioning
        python agentic-iac provision \
          --analysis-file deployment-analysis.json \
          --environment ${ENVIRONMENT} \
          --dry-run ${DRY_RUN} \
          --parallel \
          --auto-approve
        
        # Extract outputs for next jobs
        if [ -f provisioning-results.json ]; then
          AWS_RESOURCES=$(jq -c '.aws_resources // {}' provisioning-results.json)
          GCP_RESOURCES=$(jq -c '.gcp_resources // {}' provisioning-results.json)
          CLUSTER_ENDPOINT=$(jq -r '.cluster_endpoint // "none"' provisioning-results.json)
          DASHBOARD_URL=$(jq -r '.dashboard_url // "none"' provisioning-results.json)
          
          echo "aws_resources=${AWS_RESOURCES}" >> $GITHUB_OUTPUT
          echo "gcp_resources=${GCP_RESOURCES}" >> $GITHUB_OUTPUT
          echo "cluster_endpoint=${CLUSTER_ENDPOINT}" >> $GITHUB_OUTPUT
          echo "dashboard_url=${DASHBOARD_URL}" >> $GITHUB_OUTPUT
          
          echo "✅ Infrastructure provisioning completed"
        else
          echo "⚠️ Provisioning completed but no detailed results available"
        fi
    
    - name: 📊 Infrastructure Summary
      run: |
        echo "## 🏗️ Infrastructure Provisioning Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|---------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Environment** | ✅ Configured | ${{ github.event.inputs.environment || 'staging' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **AWS Region** | ✅ Active | ${{ env.AWS_REGION }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **GCP Region** | ✅ Active | ${{ env.GCP_REGION }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Dry Run** | ℹ️ Mode | ${{ github.event.inputs.dry_run || 'true' }} |" >> $GITHUB_STEP_SUMMARY
        
        if [ -f provisioning-results.json ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Resource Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **AWS Resources**: $(jq -r '.aws_resources | keys | length' provisioning-results.json) components" >> $GITHUB_STEP_SUMMARY
          echo "- **GCP Resources**: $(jq -r '.gcp_resources | keys | length' provisioning-results.json) components" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: 💾 Upload Provisioning Results
      uses: actions/upload-artifact@v4
      with:
        name: infrastructure-results
        path: |
          provisioning-results.json
          logs/
          *.yaml
          *.json
        retention-days: 30

  # =========================================================================
  # 🚀 PHASE 3: APPLICATION DEPLOYMENT
  # =========================================================================
  application-deployment:
    name: 🚀 AI Application Deployment
    needs: [agentic-analysis, infrastructure-provisioning]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    if: |
      needs.infrastructure-provisioning.result == 'success' &&
      (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    
    strategy:
      matrix:
        include:
          - environment: staging
            deploy_strategy: rolling_update
          - environment: production
            deploy_strategy: blue_green
            # Only deploy to production on manual dispatch to main
            exclude_condition: ${{ github.ref != 'refs/heads/main' || github.event_name != 'workflow_dispatch' }}
    
    environment:
      name: ${{ matrix.environment }}
      url: ${{ steps.deployment.outputs.app_url }}
    
    outputs:
      deployment-status: ${{ steps.deployment.outputs.status }}
      app-url: ${{ steps.deployment.outputs.app_url }}
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python Environment
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: ⚙️ Setup Kubernetes Tools
      uses: azure/setup-kubectl@v3
      with:
        version: ${{ env.KUBERNETES_VERSION }}
    
    - name: ☁️ Configure Cloud Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: 🌐 Configure GCP Credentials
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
    
    - name: 📥 Download Previous Artifacts
      uses: actions/download-artifact@v4
      with:
        name: ai-analysis-results
    
    - name: 📥 Download Infrastructure Results
      uses: actions/download-artifact@v4
      with:
        name: infrastructure-results
    
    - name: 🚀 Execute AI Application Deployment
      id: deployment
      run: |
        export PYTHONPATH="${GITHUB_WORKSPACE}/src:$PYTHONPATH"
        
        # Determine deployment strategy based on complexity and environment
        COMPLEXITY="${{ needs.agentic-analysis.outputs.app-complexity }}"
        ENVIRONMENT="${{ matrix.environment }}"
        
        # AI-driven strategy selection
        if [ "$ENVIRONMENT" == "production" ] && [ "$COMPLEXITY" == "high" ]; then
          STRATEGY="blue_green"
        elif [ "$COMPLEXITY" == "medium" ]; then
          STRATEGY="canary"
        else
          STRATEGY="rolling_update"
        fi
        
        echo "🎯 Deployment Configuration:"
        echo "Environment: ${ENVIRONMENT}"
        echo "Strategy: ${STRATEGY}"
        echo "Complexity: ${COMPLEXITY}"
        
        # Execute AI deployment
        python agentic-iac deploy \
          --analysis-file deployment-analysis.json \
          --environment ${ENVIRONMENT} \
          --strategy ${STRATEGY} \
          --rollback-on-failure \
          --timeout 1800
        
        # Extract deployment results
        if [ -f deployment-results-${ENVIRONMENT}.json ]; then
          STATUS=$(jq -r '.status // "unknown"' deployment-results-${ENVIRONMENT}.json)
          APP_URL=$(jq -r '.app_url // "pending"' deployment-results-${ENVIRONMENT}.json)
          
          echo "status=${STATUS}" >> $GITHUB_OUTPUT
          echo "app_url=${APP_URL}" >> $GITHUB_OUTPUT
          
          echo "✅ Deployment completed with status: ${STATUS}"
          [ "$APP_URL" != "pending" ] && echo "🌐 Application URL: ${APP_URL}"
        else
          echo "⚠️ Deployment completed but no detailed results available"
          echo "status=completed" >> $GITHUB_OUTPUT
          echo "app_url=pending" >> $GITHUB_OUTPUT
        fi
    
    - name: 🔍 Verify Deployment
      run: |
        echo "🔍 Verifying deployment health..."
        
        # Basic kubectl checks if available
        if kubectl cluster-info &> /dev/null; then
          echo "📊 Cluster Status:"
          kubectl get nodes || echo "Node information not available"
          kubectl get pods -n agentic-iac || echo "Pod information not available"
          kubectl get services -n agentic-iac || echo "Service information not available"
        else
          echo "⚠️ Kubernetes cluster not accessible from this environment"
        fi
    
    - name: 📊 Deployment Summary
      run: |
        echo "## 🚀 Deployment Results - ${{ matrix.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Aspect | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Environment** | ${{ matrix.environment }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Strategy** | ${{ matrix.deploy_strategy }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Status** | ${{ steps.deployment.outputs.status }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Complexity** | ${{ needs.agentic-analysis.outputs.app-complexity }} |" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.deployment.outputs.app_url }}" != "pending" ]; then
          echo "| **App URL** | ${{ steps.deployment.outputs.app_url }} |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f deployment-results-${{ matrix.environment }}.json ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Deployed Services" >> $GITHUB_STEP_SUMMARY
          jq -r '.services[]? // empty' deployment-results-${{ matrix.environment }}.json | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY || echo "- Service information not available" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: 💾 Upload Deployment Results
      uses: actions/upload-artifact@v4
      with:
        name: deployment-results-${{ matrix.environment }}
        path: |
          deployment-results-${{ matrix.environment }}.json
          logs/
          manifests/
        retention-days: 30

  # =========================================================================
  # 🧪 PHASE 4: COMPREHENSIVE TESTING
  # =========================================================================
  comprehensive-testing:
    name: 🧪 AI Testing Suite
    needs: [agentic-analysis, application-deployment]
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    if: always() && needs.application-deployment.result == 'success'
    
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
        include:
          - test-type: performance
            condition: ${{ needs.agentic-analysis.outputs.app-complexity == 'high' }}
          - test-type: security
            condition: ${{ github.ref == 'refs/heads/main' }}
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python Environment
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-html pytest-json-report pytest-cov
    
    - name: 📥 Download Previous Artifacts
      uses: actions/download-artifact@v4
      with:
        name: ai-analysis-results
    
    - name: 🧪 Execute AI Testing Suite
      run: |
        export PYTHONPATH="${GITHUB_WORKSPACE}/src:$PYTHONPATH"
        
        # Determine test levels based on complexity
        COMPLEXITY="${{ needs.agentic-analysis.outputs.app-complexity }}"
        TEST_TYPE="${{ matrix.test-type }}"
        
        echo "🧪 Running ${TEST_TYPE} tests for ${COMPLEXITY} complexity application"
        
        # Execute AI-driven testing
        python agentic-iac test \
          --test-levels ${TEST_TYPE} \
          --parallel \
          --generate-reports \
          --coverage-threshold 80 \
          --timeout 2400
    
    - name: 📊 Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: "AI Test Results - ${{ matrix.test-type }}"
        path: 'test-reports/*.xml'
        reporter: java-junit
        fail-on-error: false
    
    - name: 📈 Upload Coverage Reports
      uses: codecov/codecov-action@v3
      if: matrix.test-type == 'unit'
      with:
        files: test-reports/coverage.xml
        flags: unittests
        name: agentic-iac-coverage
    
    - name: 💾 Upload Test Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-${{ matrix.test-type }}
        path: test-reports/
        retention-days: 30

  # =========================================================================
  # 🔄 PHASE 5: DISASTER RECOVERY VALIDATION
  # =========================================================================
  disaster-recovery-validation:
    name: 🔄 AI DR Validation
    needs: [agentic-analysis, infrastructure-provisioning, comprehensive-testing]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    if: |
      always() && 
      needs.infrastructure-provisioning.result == 'success' &&
      (github.ref == 'refs/heads/main' || github.event.inputs.enable_dr_testing == 'true')
    
    environment:
      name: disaster-recovery
    
    outputs:
      dr-readiness-score: ${{ steps.dr-validation.outputs.readiness_score }}
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python Environment
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: ☁️ Configure Cloud Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: 🌐 Configure GCP Credentials
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
    
    - name: 📥 Download Previous Artifacts
      uses: actions/download-artifact@v4
      with:
        name: infrastructure-results
    
    - name: 🔄 Validate DR Setup
      id: dr-validation
      run: |
        export PYTHONPATH="${GITHUB_WORKSPACE}/src:$PYTHONPATH"
        
        # Determine if we should test actual failover
        TEST_FAILOVER="${{ github.event.inputs.enable_dr_testing || 'false' }}"
        
        echo "🔄 Starting disaster recovery validation..."
        echo "Test failover: ${TEST_FAILOVER}"
        
        # Run DR validation (careful with actual failover testing)
        python agentic-iac validate-dr \
          --test-failover ${TEST_FAILOVER} \
          --generate-report \
          --timeout 900
        
        # Extract DR readiness score
        if [ -f dr-validation-results.json ]; then
          READINESS_SCORE=$(jq -r '.readiness_score // 0' dr-validation-results.json)
          echo "readiness_score=${READINESS_SCORE}" >> $GITHUB_OUTPUT
          echo "✅ DR validation completed with ${READINESS_SCORE}% readiness"
        else
          echo "⚠️ DR validation completed but no detailed results available"
          echo "readiness_score=0" >> $GITHUB_OUTPUT
        fi
    
    - name: 📊 DR Readiness Report
      run: |
        echo "## 🔄 Disaster Recovery Readiness" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        READINESS_SCORE="${{ steps.dr-validation.outputs.readiness_score }}"
        
        if [ "${READINESS_SCORE}" -ge 90 ]; then
          echo "### 🟢 Excellent Readiness (${READINESS_SCORE}%)" >> $GITHUB_STEP_SUMMARY
        elif [ "${READINESS_SCORE}" -ge 70 ]; then
          echo "### 🟡 Good Readiness (${READINESS_SCORE}%)" >> $GITHUB_STEP_SUMMARY
        else
          echo "### 🔴 Needs Improvement (${READINESS_SCORE}%)" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f dr-validation-results.json ]; then
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|" >> $GITHUB_STEP_SUMMARY
          jq -r '.components // {} | to_entries[] | "| \(.key) | \(.value.status) |"' dr-validation-results.json >> $GITHUB_STEP_SUMMARY || echo "| Data Sync | ✅ Active |" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: 💾 Upload DR Results
      uses: actions/upload-artifact@v4
      with:
        name: dr-validation-results
        path: |
          dr-validation-results.json
          logs/
        retention-days: 30

  # =========================================================================
  # 📋 FINAL: DEPLOYMENT SUMMARY
  # =========================================================================
  deployment-summary:
    name: 📋 Deployment Summary
    needs: 
      - agentic-analysis
      - infrastructure-provisioning
      - application-deployment
      - comprehensive-testing
      - disaster-recovery-validation
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📊 Generate Comprehensive Summary
      run: |
        echo "# 🤖 Agentic AI IaC Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📈 Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Phase | Status | Duration |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|----------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🤖 AI Analysis | ${{ needs.agentic-analysis.result == 'success' && '✅ Success' || '❌ Failed' }} | ~2 min |" >> $GITHUB_STEP_SUMMARY
        echo "| 🏗️ Infrastructure | ${{ (needs.infrastructure-provisioning.result == 'success' && '✅ Success') || (needs.infrastructure-provisioning.result == 'skipped' && '⏭️ Skipped') || '❌ Failed' }} | ~15 min |" >> $GITHUB_STEP_SUMMARY
        echo "| 🚀 Deployment | ${{ (needs.application-deployment.result == 'success' && '✅ Success') || (needs.application-deployment.result == 'skipped' && '⏭️ Skipped') || '❌ Failed' }} | ~10 min |" >> $GITHUB_STEP_SUMMARY
        echo "| 🧪 Testing | ${{ (needs.comprehensive-testing.result == 'success' && '✅ Success') || (needs.comprehensive-testing.result == 'skipped' && '⏭️ Skipped') || '❌ Failed' }} | ~15 min |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔄 DR Validation | ${{ (needs.disaster-recovery-validation.result == 'success' && '✅ Success') || (needs.disaster-recovery-validation.result == 'skipped' && '⏭️ Skipped') || '❌ Failed' }} | ~5 min |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 🎯 Key Metrics" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Application**: ${{ github.event.inputs.demo_app || 'current-repository' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Complexity**: ${{ needs.agentic-analysis.outputs.app-complexity || 'unknown' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Languages**: ${{ needs.agentic-analysis.outputs.detected-languages || 'auto-detected' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ github.event.inputs.environment || 'staging' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.disaster-recovery-validation.outputs.dr-readiness-score }}" != "" ]; then
          echo "- **DR Readiness**: ${{ needs.disaster-recovery-validation.outputs.dr-readiness-score }}%" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.agentic-analysis.result }}" == "success" ]; then
          echo "✅ **Analysis Complete** - AI agents successfully analyzed the application" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.infrastructure-provisioning.result }}" == "success" ]; then
          echo "✅ **Infrastructure Ready** - Multi-cloud resources provisioned" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.infrastructure-provisioning.result }}" == "skipped" ]; then
          echo "ℹ️ **Infrastructure Skipped** - Enable for full deployment" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.application-deployment.result }}" == "success" ]; then
          echo "✅ **Application Deployed** - Services running in target environment" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.comprehensive-testing.result }}" == "success" ]; then
          echo "✅ **Testing Complete** - All test suites passed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.disaster-recovery-validation.result }}" == "success" ]; then
          echo "✅ **DR Validated** - Cross-cloud disaster recovery confirmed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*Powered by Agentic AI Infrastructure as Code* 🤖" >> $GITHUB_STEP_SUMMARY

    - name: 🎉 Workflow Completion
      run: |
        echo "🎉 Agentic AI IaC workflow completed!"
        echo "📊 Check the summary above for detailed results"
        echo "📁 All artifacts have been uploaded for review"
        
        # Determine overall success
        if [ "${{ needs.agentic-analysis.result }}" == "success" ]; then
          echo "✅ Workflow completed successfully"
          exit 0
        else
          echo "❌ Workflow completed with issues"
          exit 1
        fi
