#!/usr/bin/env python3
import sys
from pathlib import Path
import json

def main():
    print("üß† Starting AI-powered application analysis...")
    
    # Parse arguments properly
    args = sys.argv[1:]
    output_file = None
    
    # Look for --output-file argument
    if "--output-file" in args:
        output_idx = args.index("--output-file")
        if output_idx + 1 < len(args):
            output_file = args[output_idx + 1]
            # Remove --output-file and its value from args
            args = args[:output_idx] + args[output_idx + 2:]
    
    if not args:
        print("‚ùå No arguments provided")
        print("Usage: agentic-iac analyze <app_path>")
        sys.exit(1)
    
    # Handle different argument patterns
    app_path = None
    
    if args[0] == "analyze":
        if len(args) < 2:
            # Default to demo app
            app_path = "demo-apps/simple-nodejs-api"
            print(f"üîÑ No path provided, using default: {app_path}")
        else:
            # Check for --repo-path argument
            if len(args) > 2 and args[1] == "--repo-path":
                app_path = args[2] if len(args) > 2 else None
            else:
                app_path = args[1]
    elif args[0] == "--repo-path":
        # Handle --repo-path as first argument
        app_path = args[1] if len(args) > 1 else None
    else:
        # Backward compatibility - treat first arg as app path
        app_path = args[0]
    
    # Default to demo app if no valid path provided
    if not app_path or app_path == "--repo-path":
        app_path = "demo-apps/simple-nodejs-api"
        print(f"üîÑ No valid path provided, using default: {app_path}")
    
    print(f"üìÇ Analyzing: {app_path}")
    
    # Find the actual application path
    actual_path = find_application_path(app_path)
    
    if not actual_path:
        print("‚ùå No valid application path found")
        sys.exit(1)
    
    # Perform analysis
    results = analyze_application(actual_path)
    
    # Generate output files
    generate_output_files(results, output_file)

def find_application_path(requested_path):
    """Find the actual application path, trying multiple locations"""
    
    # Try the exact path first
    if Path(requested_path).exists():
        print(f"‚úÖ Found application at: {requested_path}")
        return requested_path
    
    print(f"‚ùå Application not found at: {requested_path}")
    
    # Try alternative locations including the demo app
    alternative_paths = [
        "demo-apps/simple-nodejs-api",  # Default demo
        f"demo/{Path(requested_path).name}",
        f"demo-apps/{Path(requested_path).name}",
        f"examples/{Path(requested_path).name}",
    ]
    
    print("üîç Searching alternative locations...")
    for alt_path in alternative_paths:
        if Path(alt_path).exists():
            print(f"‚úÖ Found application at alternative location: {alt_path}")
            return alt_path
    
    # If still not found, just use the demo app
    default_path = "demo-apps/simple-nodejs-api"
    if Path(default_path).exists():
        print(f"üîÑ Using default demo application: {default_path}")
        return default_path
    
    return None

def analyze_application(app_path):
    """Analyze the application and return results"""
    app_path_obj = Path(app_path)
    print(f"üìä Application type detection for: {app_path}")
    
    analysis_results = {
        "app_path": str(app_path),
        "app_type": "unknown",
        "recommendations": [],
        "infrastructure": {},
        "status": "success",
        "timestamp": str(Path.cwd())
    }
    
    # Detect application type - Check for Node.js first
    package_json_path = app_path_obj / "package.json"
    
    if package_json_path.exists():
        print("  üü¢ Node.js application detected")
        analysis_results["app_type"] = "nodejs"
        analyze_nodejs_app(app_path_obj, analysis_results)
    elif (app_path_obj / "requirements.txt").exists() or (app_path_obj / "app.py").exists():
        print("  üü¢ Python application detected")
        analysis_results["app_type"] = "python"
        analyze_python_app(app_path_obj, analysis_results)
    elif (app_path_obj / "pom.xml").exists():
        print("  üü¢ Java application detected")
        analysis_results["app_type"] = "java"
        analyze_java_app(app_path_obj, analysis_results)
    else:
        print("  üü° Generic application - performing basic analysis")
        analysis_results["app_type"] = "generic"
        analyze_generic_app(app_path_obj, analysis_results)
    
    print("üéâ AI-powered analysis completed successfully!")
    return analysis_results

def analyze_nodejs_app(app_path, results):
    """Analyze Node.js application"""
    print("  üì¶ Analyzing package.json...")
    
    try:
        import json
        with open(app_path / "package.json") as f:
            package_data = json.load(f)
        
        print(f"    - Name: {package_data.get('name', 'Unknown')}")
        print(f"    - Version: {package_data.get('version', 'Unknown')}")
        
        dependencies = package_data.get('dependencies', {})
        print(f"    - Dependencies: {len(dependencies)} packages")
        
        results["infrastructure"] = {
            "container": "node:18-alpine",
            "port": 3000,
            "health_check": "/health",
            "build_command": "npm install",
            "start_command": "npm start"
        }
        
        if 'express' in dependencies:
            print("    - üåê Express.js web framework detected")
            results["recommendations"].extend([
                "Use load balancer for high availability",
                "Deploy multiple container instances",
                "Consider Redis for session storage",
                "Add request rate limiting"
            ])
        
        # Check for Dockerfile
        if (app_path / "Dockerfile").exists():
            print("    - üê≥ Dockerfile found - containerization ready")
            results["recommendations"].append("Application is Docker-ready")
            
    except Exception as e:
        print(f"    ‚ùå Error analyzing package.json: {e}")

def analyze_python_app(app_path, results):
    """Analyze Python application"""
    print("  üêç Analyzing Python application...")
    
    results["infrastructure"] = {
        "container": "python:3.9-slim",
        "port": 5000,
        "health_check": "/health"
    }

def analyze_java_app(app_path, results):
    """Analyze Java application"""
    print("  ‚òï Java application detected")
    results["infrastructure"] = {
        "container": "openjdk:17-jre-slim",
        "port": 8080,
        "health_check": "/actuator/health"
    }

def analyze_generic_app(app_path, results):
    """Analyze generic application"""
    print("  üìÅ Performing generic file analysis...")
    
    # Check for common files
    common_files = ["Dockerfile", "docker-compose.yml", "README.md"]
    found_files = []
    for file_name in common_files:
        if (app_path / file_name).exists():
            found_files.append(file_name)
            print(f"    - ‚úÖ {file_name} found")
    
    if found_files:
        results["recommendations"].append(f"Found configuration files: {', '.join(found_files)}")

def generate_output_files(results, output_file=None):
    """Generate analysis output files"""
    
    # Create results directory
    output_dir = Path("results")
    output_dir.mkdir(exist_ok=True)
    
    # Generate the standard text file
    text_file = output_dir / "analysis-results.txt"
    with open(text_file, "w") as f:
        f.write("# Agentic IaC Analysis Results\n\n")
        f.write(f"Application Path: {results['app_path']}\n")
        f.write(f"Application Type: {results['app_type']}\n")
        f.write(f"Status: {results['status']}\n\n")
        
        if results['infrastructure']:
            f.write("## Infrastructure Recommendations\n")
            for key, value in results['infrastructure'].items():
                f.write(f"- {key}: {value}\n")
            f.write("\n")
        
        if results['recommendations']:
            f.write("## Additional Recommendations\n")
            for rec in results['recommendations']:
                f.write(f"- {rec}\n")
    
    print(f"üìÑ Text results saved to: {text_file}")
    
    # Generate the JSON file that the workflow expects
    json_filename = output_file or "deployment-analysis.json"
    json_file = Path(json_filename)
    
    try:
        with open(json_file, "w") as f:
            json.dump(results, f, indent=2)
        print(f"üìÑ JSON results saved to: {json_file}")
        
        # Verify the file was created and has content
        if json_file.exists() and json_file.stat().st_size > 0:
            print(f"‚úÖ Output file verification: {json_file} ({json_file.stat().st_size} bytes)")
        else:
            print(f"‚ùå Output file verification failed: {json_file}")
            sys.exit(1)
            
    except Exception as e:
        print(f"‚ùå Error creating JSON output: {e}")
        sys.exit(1)

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"‚ùå Fatal error: {e}")
        sys.exit(1)
